#include <iostream>
#include <vector>
#include <sstream>
#include <iomanip>
#include <openssl/sha.h> // Ensure you link with -lssl -lcrypto for OpenSSL
#include <ctime>

using namespace std;


class Block {
 // Method to calculate the block hash using SHA-256
    string calculateBlockHash() {
        // Combine block's data into a single string
        stringstream ss;
        ss << previousBlockHash << timestamp << merkleRoot << nonce;
        string toHash = ss.str();

        // Calculate SHA-256 hash of the combined string
        unsigned char hash[SHA256_DIGEST_LENGTH];
        SHA256_CTX sha256;
        SHA256_Init(&sha256);
        SHA256_Update(&sha256, toHash.c_str(), toHash.size());
        SHA256_Final(hash, &sha256);

        // Convert hash to a hexadecimal string
        stringstream hashString;
        for (int i = 0; i < SHA256_DIGEST_LENGTH; ++i) {
            hashString << hex << setw(2) << setfill('0') << (int)hash[i];
        }

        return hashString.str(); // Return the hash as a string
    }

    // Method to mine the block
    void mineBlock() {
        // Create a target string with leading zeros equal to difficulty level
        string target(difficultyLevel, '0');
        
        // Continue looping until a valid hash is found
        do {
            nonce++; // Increment the nonce to try a new hash
            blockHash = calculateBlockHash(); // Calculate the hash with the current nonce
            
            // Print current nonce and hash for debugging (optional)
            // cout << "Nonce: " << nonce << ", Hash: " << blockHash << endl;

        // Check if the hash starts with the target number of leading zeros
        } while (blockHash.substr(0, difficultyLevel) != target);

        // When a valid hash is found, print the result
        cout << "Block mined: " << blockHash << endl;
    }
};

int main() {
    // Create the genesis block with difficulty level 4
    Block genesisBlock("0", 4); 
    // Mine the genesis block
    genesisBlock.mineBlock(); 

    return 0;
}
